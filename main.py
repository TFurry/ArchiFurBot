from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters.command import Command
import asyncio
import random
import asyncpg
import math

bot_token = '–¢–û–ö–ï–ù –ë–û–¢–ê' #–ë–æ—Ç –¢–æ–∫–µ–Ω
database_url = 'postgresql://–Æ–ó–ï–†:–ü–ê–†–û–õ–¨.@–ê–ô–ü–ò:–ü–û–†–¢/–ò–ú–Ø–ë–î' #URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

#   CREATE TABLE IF NOT EXISTS public.users
#   (
#       id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
#       uid double precision NOT NULL,
#       chat_id double precision DEFAULT 0,
#       tail_lenght integer NOT NULL DEFAULT 10,
#       firstname character varying(25) COLLATE pg_catalog."default" NOT NULL,
#       money integer NOT NULL DEFAULT 0,
#       use_lenght integer NOT NULL DEFAULT 0,
#       reputation integer NOT NULL DEFAULT 0,
#       use_reputation integer NOT NULL DEFAULT 0,
#       CONSTRAINT users_pkey PRIMARY KEY (id)
#   )


# –í—Ä–µ–º—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
autodeletetime = 180
# –í—Ä–µ–º—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
errordeletetime = 30

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=bot_token)
dp = Dispatcher()


# –ú–æ–¥—É–ª—å –•–í–û–°–¢: ================================================================================================

# –ö–æ–º–∞–Ω–¥–∞ "–•–≤–æ—Å—Ç"
@dp.message(F.text.lower() == "!—Ö–≤–æ—Å—Ç")
@dp.message(Command("tail"))
async def tail(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if not user:
                        username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                    last_use = await connection.fetchval('SELECT use_lenght FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if last_use == 0:
                        plusorminus = random.randint(1, 5)
                        tail_lenght = await connection.fetchval(f'SELECT tail_lenght FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                        money = await connection.fetchval(f'SELECT money FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                        if plusorminus in [1, 2, 3, 4]:
                            lenght_plml = random.randint(1, 10)
                            money_plus = random.randint(10, 100)
                            fin_money = money + money_plus
                            new_tail_lenght = tail_lenght + lenght_plml
                        else:
                            lenght_plml = random.randint(1, 5)
                            money_plus = random.randint(10, 50)
                            fin_money = money + money_plus
                            new_tail_lenght = max(tail_lenght - lenght_plml, 0)
                        await connection.execute('UPDATE users SET tail_lenght = $1, use_lenght = 1, money = money + $2 WHERE uid = $3 AND chat_id = $4', new_tail_lenght, money_plus, message.from_user.id, message.chat.id)
                        msg = await message.answer(f"ü¶ä [{message.from_user.first_name}](tg://user?id={message.from_user.id}), —Ç–≤–æ–π —Ö–≤–æ—Å—Ç {'–≤—ã—Ä–æ—Å' if plusorminus in [1, 2, 3, 4] else '—É–º–µ–Ω—å—à–∏–ª—Å—è'} –Ω–∞ {lenght_plml} —Å–º. \nüìè –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ {new_tail_lenght} —Å–º. \nüëõ +{money_plus} –º–æ–Ω–µ—Ç. –í—Å–µ–≥–æ: {fin_money}\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤—Ç—Ä–∞.", parse_mode="Markdown", disable_web_page_preview="true")
                    else:
                        msg = await message.answer(f"‚è≥ –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å.")
            await asyncio.sleep(autodeletetime)
            await msg.delete()
            await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()   

# –†–µ–π—Ç–∏–Ω–≥
@dp.message(F.text.lower() == "!—Ä–µ–π—Ç–∏–Ω–≥")
@dp.message(Command("rating"))
async def tailrating(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    rating = await connection.fetch(f'SELECT firstname, tail_lenght FROM users WHERE chat_id = $1 ORDER BY tail_lenght DESC LIMIT 10;', message.chat.id)
                    chatname = message.chat.title
                    raitingtext = f"üèÜ –¢–æ–ø —Ö–≤–æ—Å—Ç–æ–≤ —á–∞—Ç–∞ \"{chatname}\":\n"
                    for num, row in enumerate(rating, start=1):
                        first_name = row[0]
                        tail_lenght = row[1]
                        raitingtext += f"{num}: {first_name} - {tail_lenght} —Å–º.\n"
                    msg = await message.answer(raitingtext, parse_mode="Markdown", disable_web_page_preview="true")
            await asyncio.sleep(autodeletetime)
            await msg.delete()
            await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç
@dp.message(F.text.lower().startswith('!–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'))
@dp.message(Command("send")) 
async def send(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:        
            if message.reply_to_message:
                if not message.text:
                    return
                args = message.text.split()
                if len(args) < 2:
                    msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /send <—Å—É–º–º–∞>")
                    await asyncio.sleep(errordeletetime)            
                    await msg.delete()
                    await message.delete()
                    return
                ammount = args[1]
                try:
                    ammount = int(ammount)
                except:
                    msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /send <—Å—É–º–º–∞>")
                    await asyncio.sleep(errordeletetime)            
                    await msg.delete()
                    await message.delete()        
                    return
                ammount = math.floor(float(ammount))
                if ammount < 1:
                    msg = await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç 1")
                    await asyncio.sleep(errordeletetime)            
                    await msg.delete()
                    await message.delete()        
                    return
                async with asyncpg.create_pool(dsn=database_url) as pool:
                    async with pool.acquire() as connection:
                        user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                        if not user:
                            username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                            await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                        touser = await connection.fetch('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.reply_to_message.from_user.id, message.chat.id)
                        if not touser:
                            username = message.reply_to_message.from_user.first_name if len(message.reply_to_message.from_user.first_name) < 16 else f'{message.reply_to_message.from_user.first_name[:15]}...'
                            await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.reply_to_message.from_user.id, message.reply_to_message.chat.id, username)

                        money = await connection.fetchval('SELECT money FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                        if money >= ammount:
                            await connection.execute('UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', ammount, message.from_user.id, message.chat.id)
                            await connection.execute('UPDATE users SET money = money + $1 WHERE uid = $2 AND chat_id = $3', ammount, message.reply_to_message.from_user.id, message.chat.id)
                            msg = await message.reply(f"üì¶ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—É–º–º—É {ammount}", parse_mode="Markdown", disable_web_page_preview="true")
                        else:
                            msg = await message.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
                await asyncio.sleep(errordeletetime)
                await msg.delete()
                await message.delete()    
            else:
                msg = await message.answer(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Ç–æ–≥–æ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã.")
                await asyncio.sleep(errordeletetime)
                await msg.delete()
                await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()

#–ú–∏–Ω–∏ –∏–≥—Ä–∞ –î–∞—Ä—Ç—Å
@dp.message(F.text.lower().startswith('!–¥–∞—Ä—Ç—Å'))
@dp.message(Command("darts")) 
async def footdice(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:           
            if not message.text:
                return
            args = message.text.split()
            if len(args) < 2:
                msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /darts <—Å—É–º–º–∞>")
                await asyncio.sleep(errordeletetime)            
                await msg.delete()
                await message.delete()  
                return
            cost = args[1]
            try:
                cost = int(cost)
            except:
                msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /darts <—Å—É–º–º–∞>")
                await asyncio.sleep(errordeletetime)            
                await msg.delete()
                await message.delete()        
                return
            cost = math.floor(float(cost))
            if cost < 10 or cost > 1000:
                msg = await message.reply("‚ö†Ô∏è –í –¥–∞—Ä—Ç—Å –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å—É–º–º—É –æ—Ç 10 –¥–æ 1000 –º–æ–Ω–µ—Ç.")
                await asyncio.sleep(errordeletetime)            
                await msg.delete()
                await message.delete()        
                return
            ballyes = 0
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if not user:
                        username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                    money = await connection.fetchval(f'SELECT money FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if money >= cost:
                        ball = await message.answer_dice("üéØ")
                        ballyes = 1
                        await asyncio.sleep(4)
                        if ball.dice.value == 1:
                            msg = await message.answer(f"üò≠ [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–ø–∞–ª. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ü–µ–ª—å—Å—è –ª—É—á—à–µ. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 2:
                            msg = await message.answer(f"üò• [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –∫–∞–∫-—Ç–æ —Ç—ã –ø–ª–æ—Ö–æ –ø—Ä–∏—Ü–µ–ª–∏–ª—Å—è. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 3:
                            msg = await message.answer(f"üòü [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏ –Ω–µ –ø–æ–ø–∞–ª. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 4:
                            msg = await message.answer(f"üôÉ [{message.from_user.first_name}](tg://user?id={message.from_user.id}), —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 5:
                            winsum = math.floor(cost * 1.75)
                            newwinsum = winsum - cost
                            msg = await message.answer(f"üëå [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –±—ã–ª–æ –±—ã –≤ —Ü–µ–ª—å. –ù–æ –≤—Å–µ –∂–µ \nüëõ –í—ã–∏–≥—Ä—ã—à: {winsum} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money + $1 WHERE uid = $2 AND chat_id = $3', newwinsum, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 6:
                            winsum = math.floor(cost * 2.0)
                            newwinsum = winsum - cost
                            msg = await message.answer(f"üçè [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –ø—Ä—è–º–æ –≤ —è–±–ª–æ—á–∫–æ. \nüëõ –í—ã–∏–≥—Ä—ã—à: {winsum} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money + $1 WHERE uid = $2 AND chat_id = $3', newwinsum, message.from_user.id, message.chat.id)
                        await asyncio.sleep(autodeletetime)
                    else:
                        msg = await message.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
            await asyncio.sleep(autodeletetime)
            if ballyes == 1:
                await ball.delete()
            await msg.delete()
            await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()                

#–ú–∏–Ω–∏ –∏–≥—Ä–∞ –ë–∞—Å–∫–µ—Ç–±–æ–ª
@dp.message(F.text.lower().startswith('!–±–∞—Å–∫–µ—Ç–±–æ–ª'))
@dp.message(Command("basketball"))
async def basketdice(message: Message):  
    try: 
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:           
            if not message.text:
                return
            args = message.text.split()
            if len(args) < 2:
                msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /basketball <—Å—É–º–º–∞>")
                await asyncio.sleep(errordeletetime)
                await msg.delete()
                await message.delete()
                return
            cost = args[1]
            try:
                cost = int(cost)
            except:
                msg = await message.reply("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /basketball <—Å—É–º–º–∞>")
                await asyncio.sleep(errordeletetime)        
                await msg.delete()
                await message.delete()        
                return
            cost = math.floor(float(cost))
            if cost < 10 or cost > 1000:
                msg = await message.reply("‚ö†Ô∏è –í –±–∞—Å–∫–µ—Ç–±–æ–ª –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å—É–º–º—É –æ—Ç 10 –¥–æ 1000 –º–æ–Ω–µ—Ç.")
                await asyncio.sleep(errordeletetime)        
                await msg.delete()
                await message.delete()          
                return
            ballyes = 0
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if not user:
                        username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                    money = await connection.fetchval(f'SELECT money FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if money >= cost:
                        ball = await message.answer_dice("üèÄ")
                        ballyes = 1
                        await asyncio.sleep(4)
                        if ball.dice.value == 1:
                            msg = await message.answer(f"üò• [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –±–µ–∑ —à–∞–Ω—Å–æ–≤. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 2:
                            msg = await message.answer(f"üòü [{message.from_user.first_name}](tg://user?id={message.from_user.id}), —ç—Ç–æ —Ñ–∏–∞—Å–∫–æ. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 3:
                            msg = await message.answer(f"üôÉ [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ü–µ–ª—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É, –∞ –Ω–µ –º–µ–∂–¥—É –Ω–µ–π –∏ —â–∏—Ç–æ–º. \nüëõ –ü—Ä–æ–∏–≥—Ä—ã—à: {cost} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money - $1 WHERE uid = $2 AND chat_id = $3', cost, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 4:
                            winsum = math.floor(cost * 1.6)
                            newwinsum = winsum - cost
                            msg = await message.answer(f"üëå [{message.from_user.first_name}](tg://user?id={message.from_user.id}), –º—è—á –≤—Å–µ-–∂–µ –≤ —Å–µ—Ç–∫–µ, —Ö–æ—Ç—å –∏ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –Ω–∞ –æ–±–æ–¥–∫–µ. \nüëõ –í—ã–∏–≥—Ä—ã—à: {winsum} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money + $1 WHERE uid = $2 AND chat_id = $3', newwinsum, message.from_user.id, message.chat.id)
                        elif ball.dice.value == 5:
                            winsum = math.floor(cost * 1.6)
                            newwinsum = winsum - cost
                            msg = await message.answer(f"üéñ [{message.from_user.first_name}](tg://user?id={message.from_user.id}), —á–∏—Å—Ç—ã–π –±—Ä–æ—Å–æ–∫! –ü–æ—Ä–∞ –≤ NBA. \nüëõ –í—ã–∏–≥—Ä—ã—à: {winsum} –º–æ–Ω–µ—Ç.", parse_mode="Markdown", disable_web_page_preview="true")
                            await connection.execute(f'UPDATE users SET money = money + $1 WHERE uid = $2 AND chat_id = $3', newwinsum, message.from_user.id, message.chat.id)
                        await asyncio.sleep(autodeletetime)
                    else:
                        msg = await message.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
            await asyncio.sleep(autodeletetime)
            if ballyes == 1:
                await ball.delete()
            await msg.delete()
            await message.delete()
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()                

# –ü—Ä–æ—Ñ–∏–ª—å ============================================================================================================================================================

#–ú–æ–π–•–≤–æ—Å—Ç
@dp.message(F.text.lower() == "!–ø—Ä–æ—Ñ–∏–ª—å")
@dp.message(Command("profile"))
async def mytail(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:        
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if not user:
                        username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                    tail_lenght = await connection.fetchval(f'SELECT tail_lenght FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    use_lenght = await connection.fetchval(f'SELECT use_lenght FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)  
                    if use_lenght == 0:
                        ulmsg = "(‚úì)"
                    else:
                        ulmsg = "(—Ö)"
                    money = await connection.fetchval(f'SELECT money FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    reputation = await connection.fetchval(f'SELECT reputation FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    use_reputation = await connection.fetchval(f'SELECT use_reputation FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if use_reputation == 0:
                        urmsg = "(‚úì)"
                    else:
                        urmsg = "(—Ö)"                    
                    msg = await message.answer(f"üìï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) \nüìè {ulmsg} –î–ª–∏–Ω–∞ —Ö–≤–æ—Å—Ç–∞: {tail_lenght} —Å–º.  \nüëõ –ú–æ–Ω–µ—Ç—ã: {money} \nüçö {urmsg} –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation} ", parse_mode="Markdown", disable_web_page_preview="true")
            await asyncio.sleep(autodeletetime)
            await msg.delete()
            await message.delete()        
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()

# –ú–æ–¥—É–ª—å —Ä–µ–ø—É—Ç–∞—Ü–∏—è ====================================================================================================================================================

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
@dp.message(F.text.lower().contains('—Å–ø–∞—Å–∏–±–æ') & F.reply_to_message)
async def plusrep(message: Message):
    try:
        if message.chat.type not in ['group', 'supergroup']:
            msg = await message.answer(f"üí¨ –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        else:
            if message.from_user.id == message.reply_to_message.from_user.id:
                return
            async with asyncpg.create_pool(dsn=database_url) as pool:
                async with pool.acquire() as connection:
                    user = await connection.fetchrow('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if not user:
                        username = message.from_user.first_name if len(message.from_user.first_name) < 16 else f'{message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.from_user.id, message.chat.id, username)
                    touser = await connection.fetch('SELECT * FROM users WHERE uid = $1 AND chat_id = $2', message.reply_to_message.from_user.id, message.chat.id)
                    if not touser:
                        username = message.reply_to_message.from_user.first_name if len(message.reply_to_message.from_user.first_name) < 16 else f'{message.reply_to_message.from_user.first_name[:15]}...'
                        await connection.execute('INSERT INTO users (uid, chat_id, firstname) VALUES ($1, $2, $3)', message.reply_to_message.from_user.id, message.chat.id, username)   
                    reputation = await connection.fetchval(f'SELECT reputation FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)                         
                    treputation = await connection.fetchval(f'SELECT reputation FROM users WHERE uid = $1 AND chat_id = $2', message.reply_to_message.from_user.id, message.chat.id)
                    newtreputation = treputation + 1
                    use_reputation = await connection.fetchval(f'SELECT use_reputation FROM users WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)
                    if use_reputation == 0:
                        msg = await message.answer(f"üçö [{message.from_user.first_name}](tg://user?id={message.from_user.id}) ({reputation}) –ø–æ–≤—ã—Å–∏–ª(–∞) —Ä–µ–ø—É—Ç–∞—Ü–∏—é [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) ({newtreputation})", parse_mode="Markdown", disable_web_page_preview="true")
                        await connection.execute('UPDATE users SET reputation = $1 WHERE uid = $2 AND chat_id = $3', newtreputation, message.reply_to_message.from_user.id, message.chat.id)
                        await connection.execute('UPDATE users SET use_reputation = 1 WHERE uid = $1 AND chat_id = $2', message.from_user.id, message.chat.id)    
    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()     


# –†–ü-–î–µ–π—Å—Ç–≤–∏—è ===============================================================================================================================================
# –†–ü-–î–µ–π—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
actions = {
    "—É–∫—É—Å–∏—Ç—å": {"emoji": "üò±", "action": "—É–∫—É—Å–∏–ª(–∞)"},
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"emoji": "üòò", "action": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)"},
    "–ª–∏–∑–Ω—É—Ç—å": {"emoji": "üëÖ", "action": "–ª–∏–∑–Ω—É–ª(–∞)"},
    "–æ–±–Ω—è—Ç—å": {"emoji": "ü§ó", "action": "–æ–±–Ω—è–ª(–∞)"},
    "–∏—Å–ø—É–≥–∞—Ç—å": {"emoji": "üëª", "action": "–∏—Å–ø—É–≥–∞–ª(–∞)"},
    "–ø–æ–Ω—é—Ö–∞—Ç—å": {"emoji": "üëÉ", "action": "–ø–æ–Ω—é—Ö–∞–ª(–∞)"},
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"emoji": "üñê", "action": "–ø–æ–≥–ª–∞–¥–∏–ª(–∞)"},
    "–±—É–ø–Ω—É—Ç—å": {"emoji": "üëâ", "action": "–±—É–ø–Ω—É–ª(–∞)"},
    "—Ç—ã–∫–Ω—É—Ç—å": {"emoji": "üëâ", "action": "—Ç—ã–∫–Ω—É–ª(–∞)"},
    "—É–¥–∞—Ä–∏—Ç—å": {"emoji": "üò°", "action": "—É–¥–∞—Ä–∏–ª(–∞)"},
    "–ø–Ω—É—Ç—å": {"emoji": "üò°", "action": "–ø–Ω—É–ª(–∞)"},
    "–ø–æ—Ö–≤–∞–ª–∏—Ç—å": {"emoji": "‚ò∫Ô∏è", "action": "–ø–æ—Ö–≤–∞–ª–∏–ª(–∞)"},
    "—É—â–∏–ø–Ω—É—Ç—å": {"emoji": "üòÆ", "action": "—É—â–∏–ø–Ω—É–ª(–∞)"},
    "–ø–æ–∫–æ—Ä–º–∏—Ç—å": {"emoji": "üçï", "action": "–ø–æ–∫–æ—Ä–º–∏–ª(–∞)"}
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–∏—Å–∫ —Ä–ø –¥–µ–π—Å—Ç–≤–∏–π
@dp.message(F.reply_to_message)
async def rp(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    try:
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
        text = message.text.lower()
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ "–î–µ–π—Å—Ç–≤–∏–µ" –∏ "–ü–∞—Ä–∞–º–µ—Ç—Ä"
        action, _, param = text.partition(" ")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if action in actions:
            # –≠–º–æ–¥–∑–∏
            emoji = actions[action]["emoji"]
            # –î–µ–π—Å—Ç–≤–∏–µ
            action = actions[action]["action"]
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete() 

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä
            if param:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
                msg = await message.answer(f"{emoji} [{message.from_user.first_name}](tg://user?id={message.from_user.id}) {action} [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) {param}", parse_mode="Markdown", disable_web_page_preview="true")
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–µ—Å–ª–∏ –Ω–µ—Ç)
                msg = await message.answer(f"{emoji} [{message.from_user.first_name}](tg://user?id={message.from_user.id}) {action} [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})", parse_mode="Markdown", disable_web_page_preview="true")
    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ –≤—ã–≤–æ–¥ –µ–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "errordeletetime"
    except Exception as e:
        msg = await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete()   

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(F.reply_to_message & F.text.lower().startswith('!–∫–∞—Å—Ç–æ–º '))
async def custom_cmd(message: Message):
    if not message.text:
        return
    args = message.text.split()
    if len(args) < 3:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: !–∫–∞—Å—Ç–æ–º <—ç–º–æ–¥–∂–∏> <–¥–µ–π—Å—Ç–≤–∏–µ>")
        await asyncio.sleep(errordeletetime)
        await msg.delete()
        await message.delete() 
        return
    emoji = args[1]
    message_text = " ".join(args[2:])
    await message.delete()    
    await message.answer(f'{emoji} [{message.from_user.first_name}](tg://user?id={message.from_user.id}) {message_text} [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})', parse_mode="Markdown", disable_web_page_preview="true")   

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(F.text.lower().startswith('!—è '))
async def custom_cmd(message: Message):
    if not message.text:
        return
    args = message.text.split()
    if len(args) < 3:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: !—è <—ç–º–æ–¥–∂–∏> <–¥–µ–π—Å—Ç–≤–∏–µ>")
        return
    emoji = args[1]
    message_text = " ".join(args[2:])
    await message.delete()
    await message.answer(f'{emoji} [{message.from_user.first_name}](tg://user?id={message.from_user.id}) {message_text}', parse_mode="Markdown", disable_web_page_preview="true")   

# –ü–æ–º–æ—â—å ==========================================================================================================
@dp.message(F.text.lower().startswith('!–ø–æ–º–æ—â—å'))
@dp.message(Command("help"))
async def cmd_help(message: Message):
    msg = await message.answer(f"/tail - –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Ö–≤–æ—Å—Ç —Ä–∞–∑ –≤ –¥–µ–Ω—å \n/profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n/rating - –¢–æ–ø —Ö–≤–æ—Å—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ \n/send <—Å—É–º–º–∞> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ö–æ–º–∞–Ω–¥—É –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–ª–∞–µ–º. \n/darts <—Å—É–º–º–∞> - –ú–∏–Ω–∏ –∏–≥—Ä–∞ –î–∞—Ä—Ç—Å \n/basketball <—Å—É–º–º–∞> - –ú–∏–Ω–∏ –∏–≥—Ä–∞ –ë–∞—Å–∫–µ—Ç–±–æ–ª")
    await asyncio.sleep(autodeletetime)
    await msg.delete()
    await message.delete()   



# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def start_bot(bot: Bot):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start():
    dp.startup.register(start_bot)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(start())